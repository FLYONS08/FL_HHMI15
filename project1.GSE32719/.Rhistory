?fit2
str(fit2)
annotation(gset)
meta(gset)
Meta(gset)
str(tT)
?topTable
tT2 <- topTable(fit2, adjust="fdr", sort.by="B", number=NA)
tT2 <- topTable(fit2, adjust="fdr", sort.by="B", number=length(fit2))
fit$coefficients
str( fit$coefficients )
fit$p.value
fit$P.value
fit[1,]
summary(ex)
str(ex)
str(gset)
save.image("GSE32719.RData")
ls()
list.files()
get.wd()
get.pwd()
getwd()
setwd("~/github/FL_HHMI15/project1.GSE32719")
setwd("~/github/FL_HHMI15/project1.GSE32719")
library(Biobase)
library(GEOquery)
library(limma)
# source("https://bioconductor.org/biocLite.R")
# biocLite("hgu133plus2.db")
library("hgu133plus2.db")
help(package="hgu133plus2.db")
ls("package:hgu133plus2.db")
# x <- hgu133plus2GENENAME
x <- hgu133plus2SYMBOL
mapped_probes <- mappedkeys(x)
xx <- as.list(x[mapped_probes])
xx[1:5]
gset <- getGEO("GSE32719", GSEMatrix =TRUE)
save.image("GSE32719.RData")
list.files()
varMetadata(gset)
str(gset)
pData(gset)
phenoData(gset)
phenoData(gset)
gset@phenoData
gset@phenoData
gset$phenoData
gset@phenoData@data
gset@phenoData@data
rm(list=ls())
library(Biobase)
library(GEOquery)
library(limma)
load("GSE47856.RData")
rm(list=ls())
setwd("~/github/FL_HHMI15/project1.GSE32719")
library(Biobase)
library(GEOquery)
library(limma)
library("hgu133plus2.db")
help(package="hgu133plus2.db")
ls("package:hgu133plus2.db")
# x <- hgu133plus2GENENAME
x <- hgu133plus2SYMBOL
mapped_probes <- mappedkeys(x)
xx <- as.list(x[mapped_probes])
load("GSE32719.RData")
if (length(gset) > 1) idx <- grep("GPL570", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
idx
annotation(gset)
attr(gset)
attr(gset, 'names')
gset[[1]]
fvarLabels(gset)
# make proper column names to match toptable
fvarLabels(gset) <- make.names(fvarLabels(gset))
gset@phenoData@data
phenotData(gset)
pData(gset)
experimental_design = gset@phenoData@data
View(experimental_design)
gset@phenoData@varMetadata
experimental_design
experimental_design[1:10,  c("title")]
unique( experimental_design$characteristics_ch1 )
unique( experimental_design$title )
experimental_design[1:10,  c("title", "source_name_ch1")]
unique( experimental_design$source_name_ch1 )
ls()
list.files()
?save
gset <- getGEO("GSE32719", GSEMatrix =TRUE)
save(gset, file = "GSE32719_gset.RData")
rm(gset)
load("GSE32719_gset.RData")
rm(list=ls())
setwd("~/github/FL_HHMI15/project1.GSE32719")
library(Biobase)
library(GEOquery)
library(limma)
# source("https://bioconductor.org/biocLite.R")
# biocLite("hgu133plus2.db")
library("hgu133plus2.db")
help(package="hgu133plus2.db")
ls("package:hgu133plus2.db")
# x <- hgu133plus2GENENAME
x <- hgu133plus2SYMBOL
mapped_probes <- mappedkeys(x)
xx <- as.list(x[mapped_probes])
xx[1:5]
load("GSE32719_gset.RData")
# make proper column names to match toptable
fvarLabels(gset) <- make.names(fvarLabels(gset))
gset
load("GSE32719_gset.RData")
# make proper column names to match toptable
#fvarLabels(gset) <- make.names(fvarLabels(gset))
str(gset)
#gset@phenoData@data
experimental_design = gset@phenoData@data
experimental_design
# gset@phenoData@varMetadata
# experimental_design[, "source_name_ch1"][1:10]
experimental_design[1:10,  c("title", "source_name_ch1")]
unique( experimental_design$source_name_ch1 )
#gset@phenoData@data
experimental_design = gset@phenoData@data
experimental_design
rm(list=ls())
str(gset)
# source("https://bioconductor.org/biocLite.R")
# biocLite("hgu133plus2.db")
library("hgu133plus2.db")
help(package="hgu133plus2.db")
ls("package:hgu133plus2.db")
# x <- hgu133plus2GENENAME
x <- hgu133plus2SYMBOL
mapped_probes <- mappedkeys(x)
xx <- as.list(x[mapped_probes])
xx[1:5]
load("GSE32719_gset.RData")
# make proper column names to match toptable
#fvarLabels(gset) <- make.names(fvarLabels(gset))
str(gset)
#gset@phenoData@data
experimental_design = gset@phenoData@data
experimental_design
# gset@phenoData@varMetadata
# experimental_design[, "source_name_ch1"][1:10]
experimental_design[1:10,  c("title", "source_name_ch1")]
unique( experimental_design$source_name_ch1 )
gset <- getGEO(filename=system.file("GSE32719_family.soft.gz",package="GEOquery"))
?getGEO
gset <- getGEO(GEO="GSE32719", filename="GSE32719_family.soft.gz")
gset <- getGEO(GEO="GSE32719", filename="GSE32719_family.soft.gz")
gset <- getGEO(GEO="GSE32719", filename="GSE32719_family.soft.gz")
gset <- getGEO(filename="GSE32719_family.soft.gz")
str(gset)
#gset@phenoData@data
experimental_design = gset@phenoData@data
gset@header
gset@gsms
x = gset@gsms
x[[1]]
x[[1]]
str(x)
gset <- getGEO("GSE32719", GSEMatrix =TRUE)
experimental_design = gset@phenoData@data
gset@phenoData
install.packages(c("nlme", "Rcpp", "rJava"))
setwd("~/github/FL_HHMI15/project1.GSE32719")
library(Biobase)
library(GEOquery)
library(limma)
gset <- getGEO("GSE32719", GSEMatrix =TRUE)
experimental_design = gset@phenoData@data
experimental_design = gset@phenoData
gset@phenoData
gset@phenoData@data
phenoData(gset)
str(gset)
library(Biobase)
library(GEOquery)
library(limma)
gset <- getGEO(filename="GSE32719_family.soft.gz")
setwd("~/github/MJ_RISE2016/project2.GSE47856")
load("GSE47856.RData")
experimental_design = gset@phenoData@data
gset@phenoData@data
experimental_design = gset@phenoData@data
setwd("~/github/MJ_RISE2016/project2.GSE47856")
library(Biobase)
library(GEOquery)
library(limma)
load("GSE47856.RData")
if (length(gset) > 1) idx <- grep("GPL6244", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
# make proper column names to match toptable
fvarLabels(gset) <- make.names(fvarLabels(gset))
experimental_design = gset@phenoData@data
experimental_design[1:10,  c("characteristics_ch1", "characteristics_ch1.2")]
unique( experimental_design$characteristics_ch1 )
rm(list=ls())
setwd("~/github/FL_HHMI15/project1.GSE32719")
library(Biobase)
library(GEOquery)
library(limma)
gset <- getGEO("GSE32719", GSEMatrix =TRUE)
# gset <- getGEO(filename="GSE32719_family.soft.gz")
# make proper column names to match toptable
# fvarLabels(gset) <- make.names(fvarLabels(gset))
str(gset)
#gset@phenoData@data
experimental_design = gset@phenoData@data
experimental_design
# gset@phenoData@varMetadata
# experimental_design[, "source_name_ch1"][1:10]
experimental_design[1:10,  c("title", "source_name_ch1")]
unique( experimental_design$source_name_ch1 )
gset <- getGEO(filename="GSE32719_series_matrix.txt.gz")
gset@phenoData
gset@phenoData@data
str(gset)
#gset@phenoData@data
experimental_design = gset@phenoData@data
experimental_design
# gset@phenoData@varMetadata
# experimental_design[, "source_name_ch1"][1:10]
experimental_design[1:10,  c("title", "source_name_ch1")]
unique( experimental_design$source_name_ch1 )
fl <- as.factor( unique( experimental_design$source_name_ch1 ) )
fl <- as.factor( experimental_design$source_name_ch1  )
gset$description <- fl
design <- model.matrix(~ description + 0, gset)
View(design)
colnames(design) <- levels(fl)
fit <- lmFit(gset, design)
fl.names = unique(experimental_design$source_name_ch1)
fl = as.factor( LETTERS[1:length(fl.names)])
fl
fl.names
sample.names = unique(treatments)
sample.letters = as.factor( LETTERS[1:length(fl.names)])
sample.names = unique(experimental_design$source_name_ch1)
sample.factors = as.factor( LETTERS[1:length(fl.names)])
sample.factors
names(sample.letters) = sample.names
sample.letters
experimental_design$source_name_ch1
sample.letters[experimental_design$source_name_ch1 ]
sample.names = unique(experimental_design$source_name_ch1)
sample.letters = as.factor( LETTERS[1:length(fl.names)])
names(sample.letters) = sample.names
sample.letters[experimental_design$source_name_ch1 ]
fl <- as.factor( sample.letters[experimental_design$source_name_ch1 ] )
gset$description <- fl
design <- model.matrix(~ description + 0, gset)
colnames(design) <- levels(fl)
fit <- lmFit(gset, design)
cont.matrix <- makeContrasts(A-B-C, levels=design)
cont.matrix
cont.matrix <- makeContrasts(A-B~C, levels=design)
cont.matrix
str(cont.matrix)
?cont.matrix
cont.matrix
?makeContrasts
design
fit <- lmFit(gset, design)
cont.matrix <- makeContrasts(A-B~C, levels=design)
cont.matrix
fit2 <- contrasts.fit(fit, cont.matrix)
fit2 <- eBayes(fit2, 0.01)
tT <- topTable(fit2, adjust="fdr", sort.by="B", number=length(fit2))
View(tT)
head(tT)
gpl <- annotation(gset)
platf <- getGEO(gpl, AnnotGPL=TRUE)
ncbifd <- data.frame(attr(dataTable(platf), "table"))
?attr
sample.names = unique(experimental_design$source_name_ch1)
sample.names
sample.letters = as.factor( LETTERS[1:length(sample.names)])
sample.letters
unique(experimental_design$source_name_ch1)
sample.names
names(sample.letters) = sample.names
# set up the data and proceed with analysis
sample.names = unique(experimental_design$source_name_ch1)
sample.letters = as.factor( LETTERS[1:length(sample.names)])
names(sample.letters) = sample.names
sample.letters[experimental_design$source_name_ch1 ]
fl <- as.factor( sample.letters[experimental_design$source_name_ch1 ] )
gset$description <- fl
design <- model.matrix(~ description + 0, gset)
colnames(design) <- levels(fl)
fit <- lmFit(gset, design)
#A-B-C does not look right?
cont.matrix <- makeContrasts(A-B~C, levels=design)
cont.matrix
fit2 <- contrasts.fit(fit, cont.matrix)
fit2 <- eBayes(fit2, 0.01)
tT <- topTable(fit2, adjust="fdr", sort.by="B", number=length(fit2))
cont.matrix <- makeContrasts(A-B-C, levels=design)
ex= ExpressionSet(gset)
ex= exprs(gset)
head(ex)
apply( ex, 2, mean)
boxplot( ex )
apply( ex, 2, median)
means = apply( ex, 2, mean)
means
i=1
max(means)
means[i]
apply( ex, 2, mean)
for(i in 1:length(ex[1,])){
ex[,i] = ex[,i]*max(means)/ means[i]
}
apply( ex, 2, mean)
for(i in 1:length(ex[1,])){
ex[,i] = ex[,i]*max(means)/ means[i]
}
apply( ex, 2, mean)
ex= exprs(gset)
apply( ex, 2, median)
means = apply( ex, 2, mean)
means
max(means)
scale = max(means)
for(i in 1:length(ex[1,])){
ex[,i] = ex[,i] * scale/ means[i]
}
apply( ex, 2, mean)
boxplot( ex )
apply( ex, 2, median)
apply( ex, 2, mean)
apply( ex, 2, mean) / scale
apply( ex, 2, median) /scale
sample.names = unique(experimental_design$source_name_ch1)
sample.names = unique(experimental_design$source_name_ch1)
sample.names
sample.names = unique(experimental_design$source_name_ch1)
mylevels = c(2,3,1)
names(mylevels) = sample.names
gset.levels = mylevels[ experimental_design$source_name_ch1 ]
gset.levels
gset.levels
my.pvalues = numeric(length=length(ex[,1]))
i=1
m = lm( ex[i,] ~ gset.levels )
summary(m)
sm = summary(m)
str(sm)
?pf
sm
pf(sm$fstatistic)
pf(sm$fstatistic[1], sm$fstatistic[2], sm$fstatistic[3])
pf(sm$fstatistic[1], sm$fstatistic[2], sm$fstatistic[3], lower.tail = FALSE)
for( i in 1:length(ex[,1])){
m = lm( ex[i,] ~ gset.levels )
sm = summary(m)
my.pvalues[i] =  pf(sm$fstatistic[1], sm$fstatistic[2], sm$fstatistic[3], lower.tail = FALSE)
}
topTable()
gset@assayData$exprs[1:2,]
names(gset@assayData$exprs)
row.names(gset@assayData$exprs)
names(my.pvalues) = row.names(gset@assayData$exprs)
my.pvalues[1:10]
ncbifd[1:10,]
ncbifd[1:2,1:5]
hist(my.pvalues)
hist(my.pvalues)
?padjust
?p.adjust()
my.pvalues.BH = p.adjust((my.pvalues, "BH"))
my.pvalues.BH = p.adjust(my.pvalues, "BH")
hist(my.pvalues.BH)
summary(my.pvalues.BH)
summary(my.pvalues)
my.pvalues.BH[my.pvalues.BH < 0.05]
names(sig)
sig= my.pvalues.BH[my.pvalues.BH < 0.05]
names(sig)
?ncbifd
head(ncbifd)
ncbifd[ ncbifd$ID == names(sig),  ]
names(sig)
ncbifd$ID
names(sig)
ncbifd$ID == names(sig
()
asfd
ncbifd$ID == names(sig)
sample.names
sample.names = unique(experimental_design$source_name_ch1)
mylevels = c(1,2,3)
names(mylevels) = sample.names
gset.levels = mylevels[ experimental_design$source_name_ch1 ]
my.pvalues = numeric(length=length(ex[,1]))
names(my.pvalues) = row.names(gset@assayData$exprs)
for( i in 1:length(ex[,1])){
m = lm( ex[i,] ~ gset.levels )
sm = summary(m)
my.pvalues[i] =  pf(sm$fstatistic[1], sm$fstatistic[2], sm$fstatistic[3], lower.tail = FALSE)
}
?foreach
?foreach
?foreach()
library(foreach)
library(doMC)
my.pvalues = foreach( i = 1:length(ex[,1]), .combine='cbind') %dopar% {
m = lm( ex[i,] ~ gset.levels )
sm = summary(m)
pf(sm$fstatistic[1], sm$fstatistic[2], sm$fstatistic[3], lower.tail = FALSE)
}
registerDoMC(cores=4)
my.pvalues = foreach( i = 1:length(ex[,1]), .combine='cbind') %dopar% {
m = lm( ex[i,] ~ gset.levels )
sm = summary(m)
pf(sm$fstatistic[1], sm$fstatistic[2], sm$fstatistic[3], lower.tail = FALSE)
}
head(my.pvalues)
str(my.pvalues)
my.pvalues = foreach( i = 1:100, .combine='rbind') %dopar% {
m = lm( ex[i,] ~ gset.levels )
sm = summary(m)
pf(sm$fstatistic[1], sm$fstatistic[2], sm$fstatistic[3], lower.tail = FALSE)
}
str(my.pvalues)
my.pvalues
my.pvalues = foreach( i = 1:100, .combine='rbind') %dopar% {
m = lm( ex[i,] ~ gset.levels )
sm = summary(m)
pf(sm$fstatistic[1], sm$fstatistic[2], sm$fstatistic[3], lower.tail = FALSE)
}
names(my.pvalues) = row.names(gset@assayData$exprs)
registerDoMC(cores=4)
#my.pvalues = foreach( i = 1:100, .combine='rbind') %dopar% {
my.pvalues = foreach( i = 1:length(ex[,1]), .combine='rbind') %dopar% {
m = lm( ex[i,] ~ gset.levels )
sm = summary(m)
pf(sm$fstatistic[1], sm$fstatistic[2], sm$fstatistic[3], lower.tail = FALSE)
}
names(my.pvalues) = row.names(gset@assayData$exprs)
View(my.pvalues)
row.names(my.pvalues) = row.names(gset@assayData$exprs)
View(my.pvalues)
hist(my.pvalues)
summary(my.pvalues)
my.pvalues.BH = p.adjust(my.pvalues, "BH")
hist(my.pvalues.BH)
summary(my.pvalues.BH)
sig= my.pvalues.BH[my.pvalues.BH < 0.05]
names(sig)
ncbifd[ ncbifd$ID == names(sig),  ]
row.names(sig)
my.pvalues
str(my.pvalues)
View(my.pvalues)
my.pvalues.BH = p.adjust(my.pvalues$value, "BH")
hist(my.pvalues$value)
summary(my.pvalues$value)
my.pvalues.BH = p.adjust(my.pvalues$value, "BH")
View(my.pvalues)
my.pvalues$value
my.pvalues
hist(my.pvalues)
summary(my.pvalues)
my.pvalues.BH = p.adjust(my.pvalues$value, "BH")
my.pvalues.BH = p.adjust(my.pvalues, "BH")
sig= my.pvalues.BH[my.pvalues.BH < 0.05]
str(sig)
row.names(sig)
sig
names(sig)
match(names(sig), as.character( ncbifd$ID) )
ncbifd[ as.character(ncbifd$ID) == names(sig),  ]
ncbifd[ match(names(sig), as.character( ncbifd$ID) ),  ]
sig= data.frame(sig)
View(sig)
str(ncbifd)
sig$ID = row.names(sig)
View(sig)
?merge
sig2 = merge(sig, ncbifd, by="ID")
View(sig2)
View(sig2)
unique(sig2$Gene.symbol)
unique(sig2$Gene.symbol)
sig.genes = unique(sig2$Gene.symbol)
write.table(sig.genes, "__sig.genex", sep="\t", quote=F  )
write.table(sig.genes, "__sig.genex.tsv", sep="\t", quote=F  )
write.table(sig.genes, "__sig.genex.tsv", sep="\t", quote=F, row.names=F  )
View(sig2)
sig.geneIDs = unique(sig2$Gene.ID)
write.table(sig.geneIDs, "__sig.genes.tsv", sep="\t", quote=F, row.names=F  )
write.table(sig.geneIDs, "__sig.genes.tsv", sep="\t", quote=F, row.names=F, header=F  )
write.table(sig.geneIDs, "__sig.genes.tsv", sep="\t", quote=F, row.names=F, col.names=F  )
library(topGO)
source("http://bioconductor.org/biocLite.R")
biocLite("topGO")
library(topGO)
biocLite("S4Vectors")
library(topGO)
library(IRanges)
library(topGO)
library(topGO)
